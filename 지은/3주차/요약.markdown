# Spring 강의 요약

### 스프링(Spring)이란?

- Spring Framework
- Spring Boot
- Spring data, Spring security ...

이 모든 것을 집약한 것을 의미함.

<br>

`문맥에 따라 Spring Framework만을 의미하기도, 스프링 부트와 스프링 프레임워크 등을 모두 포함한 스프링 생태계를 의미하기도, 스프링의 DI 컨테이너 기술을 의미하기도 한다.`

스프링은 Java 언어 기반의 프레임워크다. Java의 객체지향적인 특징을 살려내는 프레임워크가 바로 스프링이다. 즉, 좋은 객체지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크이다.

<br>

### Spring Framework

- DI 컨테이너, AOP, 이벤트
- 스프링 MVC
- 트랜잭션, JDBC 등등
- 최근에는 스프링 부트를 통해 스프링 프레임워크의 기술들을 편리하게 사용

<br>

### DI(Dependency Injection, 의존성 주입)
```Java
의존성(하나의 코드가 다른 코드에 의존하는 상태)이 있는 코드 혹은 객체를 넣어주는 것.
```
- IoC(Inversion of Control) : 제어 역전
> 일반적인 경우 클래스 A에서 클래스 B를 사용한다(클래스 B에 의존한다)는 것은 일방적인 방향성을 띄지만, 중간에 매개체를 사용할 경우 클래스 A는 매개체에 있는 것을 사용(↓), 클래스 B는 매개체에 등록(↑)하면서 방향의 역전이 일어난다.
> 즉, 개발자가 직접 의존성을 제어하던 것을 매개체에게 제어권을 일임 혹은 빼앗기게 되면서 더 이상 의존성을 제어하지 않게 됨 (제어 역전)

> 이 역할을 하는 것이 바로 IoC 콘테이너

![alt text](image-1.png)

<br>

- IoC를 활용한 DI의 장점
1. 의존성 감소 : 변화에 강함, 재사용성 증가, 유지보수 용이
2. 코드량 감소
3. 테스트 용이

<br>

## AOP(Aspect Oriented Programming)
> 관점 지향 프로그래밍. 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고, 그 관점을 기준으로 각각 모듈화하는 것. (모듈화 : 공통된 로직이나 기능을 하나의 단위로 묶는 것)

- Spring AOP의 특징
1. 프록시 패턴의 AOP 구현체, 프록시 객체를 쓰는 이유는 접근 제어 및 부가기능을 추가하기 위함임.
2. 핵심 기능 : 객체가 제공하는 고유의 기능 / 부가 기능 : 핵심 기능을 보조하기 위한 기능 (시간 측정, 로그 추적, 트랜잭션 관리 등)
3. OOP의 모듈화 핵심 단위는 클래스인 반면, AOP의 모륟화 단위는 Aspect이다. ==> `OOP를 대체하는 것이 아닌 보조하는 목적!!!!`
4. 스프링 bean에만 AOP를 적용 가능
5. 모든 AOP 기능을 제공하는 것이 아닌, 스프링 IoC와 연동하여 엔터프라이즈 애플리케이션에서의 가장 흔한 문제(코드의 중복, 프록시 클래스 작성의 번거로움, 객체들 간 관계 복잡도 증가)에 대한 해결책을 지원

- Spring AOP를 사용하기 위해서는 다음과 같은 의존성을 추가해야 한다.

```
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>
```

- AOP 용어 : 
Target, Aspect, Join Point, Point Cut, Advice, Weaving, AOP Proxy

![AOP용어설명](image.png)

<br>


# Spring 프로젝트 생성
>STS4 (Eclipse) 기준

```
Dynamic Web Project 생성 ==> configure - convert to maven project ==> pom.xml에 Spring 의존성 주입 (보통 spring-context만 넣어도 다른 것들이 함께 딸려온다!) ==> WEB-INF 폴더에 Spring에 필요한 xml 파일들 생성
```

<br>

- pom.xml
```
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd" id="WebApp_ID" version="6.0">
  <display-name>study_03_jieun</display-name>

  <servlet>
  	<servlet-name>springDispatcherServlet</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
  		<param-name>ContextConfigLocation</param-name>
  		<param-value>/WEB-INF/servlet-context.xml</param-value>
  	</init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>springDispatcherServlet</servlet-name>
  	<url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>/WEB-INF/root-context.xml</param-value>
  </context-param>
  
</web-app>
```

<br>

- servlet-context.xml
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- web과 직접적으로 관련 있는 설정을 하는 파일 -->
	<!-- controller 같은 것들...  -->
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<context:component-scan base-package="com.ssafy.jieun.controller"></context:component-scan>
</beans>
```

<br>

- root-context.xml
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- web과 관련 없는 설정을 하는 파일 -->
	<!-- Service / DAO 빈을 등록한다든지, DB정도를 저장을 한다든지... -->

</beans>
```

<br>

- web.xml
```
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd" id="WebApp_ID" version="6.0">
  <display-name>study_03_jieun</display-name>

  <servlet>
  	<servlet-name>springDispatcherServlet</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
  		<param-name>ContextConfigLocation</param-name>
  		<param-value>/WEB-INF/servlet-context.xml</param-value>
  	</init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>springDispatcherServlet</servlet-name>
  	<url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>/WEB-INF/root-context.xml</param-value>
  </context-param>
  
</web-app>
```

<br>

- java resources에 com.ssafy.프로젝트명.controller 생성

```
package com.ssafy.jieun.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class MainController {
	
	@RequestMapping("/")
	public String index() {
		return "index";
	}
	
	@RequestMapping(value="/home", method = RequestMethod.GET)
	public ModelAndView homeHandle1() {
		ModelAndView mav = new ModelAndView();
		
		// 데이터를 심어서 보내보기
		mav.addObject("msg", "Welcome to Spring MVC (GET)");
		
		// view 이름을 결정해야 됨 // 포워딩한 것과 같음
		mav.setViewName("home");
		
		return mav;
	}
	
	@RequestMapping(value="/home", method = RequestMethod.POST)
	public ModelAndView homeHandle2() {
		ModelAndView mav = new ModelAndView();
		
		// 데이터를 심어서 보내보기
		mav.addObject("msg", "Welcome to Spring MVC (POST)");
		
		// view 이름을 결정해야 됨 // 포워딩한 것과 같음
		mav.setViewName("home");
		
		return mav;
	}
}

```

- 아래는 GetMapping을 활용한 controller

```
package com.ssafy.jieun.controller;

import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class ControllerParameter {

	@GetMapping("/test1")
	public String test1() {
		// 반환 타입 String --> 해당 값이 viewName임
		return "test1";
	}
	
	// 데이터도 같이 보내고 싶은 경우
	// ModelAndView로 안 바꾸고 보내고 싶은 경우
	@GetMapping("/test2-1")
	public String test2_1(Model model) {
		
		// 모델이라는 바구니를 준비
		model.addAttribute("msg", "model data입니다.");
		
		return "test2";
	}
	
	@GetMapping("/test2-2")
	public String test2_2(Map<String, Object> model){
		
		// 맵의 키-밸류로도 데이터 보내기 가능
		model.put("msg", "map data입니다.");
		
		return "test2";
	}
	
	// 파라미터 값을 가지고 오고 싶다
	@GetMapping("/test3")
	public String test3(Model model, HttpServletRequest request) {
		String id = request.getParameter("id");
		String pw = request.getParameter("pw");
		model.addAttribute("id", id);
		model.addAttribute("pw", pw);
		
		return "test3";
	}
	
	// requestparam을 쓰면 request안불러와도 됨
	@GetMapping("/test3-1")
	public String test3_1(Model model, @RequestParam("id") String id, @RequestParam("pw") String pw) {
		model.addAttribute("id", id);
		model.addAttribute("pw", pw);
		
		return "test3";
	}
}

```